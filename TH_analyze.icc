
/////////////////////////////////////////////////////////
// File name: TH_analyze.cpp                           //
// Brief introduction:                                 //
//       This class create the main frame for          //
//       gui program of Process Files                  //
//                                                     //
// Version: V1.1                                       //
// Author: liu longxiang                               //
// Date: Nov. 2013                                     //
// Mail: liulongxiang@impcas.ac.cn                     //
/////////////////////////////////////////////////////////
#include <stdio.h>
#include <math.h>

//- For Histogram ------------------------------------------------------
//-
//float PSD_PX[90],PSD_NX[90],PSD_PY[90],PSD_NY[90];
//extern int triggerNo;
//	int testcount2=0;

/*void DataClear()
{
	int i;
	for(i=0;i<90;i++)
	{
			PSD_PX[i]=-1.0;
			PSD_NX[i]=-1.0;
			PSD_PY[i]=-1.0;
			PSD_NY[i]=-1.0;
    }
	
	
}*/
float HLAdd(char dataH,char dataL)
{
	int tmpH,tmpL;
	tmpH=dataH;
	tmpL=dataL;
	tmpH=((tmpH&0x003f)<<8); 
	tmpL=(tmpL&0x00ff); 
	return tmpH+tmpL;
}

float HLAddTime_Second(char SecondH,char SecondL)
{
	int tmpH,tmpL;
	tmpH=SecondH;
	tmpL=SecondL;
	tmpH=((tmpH&0x003f)<<8); 
	tmpL=(tmpL&0x00ff); 
	return tmpH+tmpL;
}

float FILEIDHLAdd(char dataH,char dataL)
{
	int tmpH,tmpL;
	tmpH=dataH;
	tmpL=dataL;
	tmpH=((tmpH&0x00ff)<<8); 
	tmpL=(tmpL&0x00ff); 
	return tmpH+tmpL;
}

float TriggerNOHLAdd(char dataH,char dataL)
{
	int tmpH,tmpL;
	tmpH=dataH;
	tmpL=dataL;
	tmpH=((tmpH&0x000f)<<8); 
	tmpL=(tmpL&0x00ff); 
	return tmpH+tmpL;
}

float FPGA4_HLAdd(char dataH,char dataL)
{
	int tmpH,tmpL;
	tmpH=dataH;
	tmpL=dataL;
	tmpH=((tmpH&0x000f)<<8); 
	tmpL=(tmpL&0x00ff); 
	return tmpH+tmpL;
}

float FPGA8_HLAdd(char dataH,char dataL)
{
	int tmpH,tmpL;
	tmpH=dataH;
	tmpL=dataL;
	tmpH=((tmpH&0x00ff)<<8); 
	tmpL=(tmpL&0x00ff); 
	return tmpH+tmpL;
}

float HLAddCurrent(char dataHCur,char dataLCur)
{
	int tmpHCur,tmpLCur;
	tmpHCur=dataHCur;
	tmpLCur=dataLCur;
	tmpHCur=((tmpHCur&0x000f)<<8); 
	tmpLCur=(tmpLCur&0x00ff); 
	return tmpHCur+tmpLCur;
}
float TempChange(int N)
{
	float B,R0,F,temp;
	B=4100;
	R0=17.25;
	F=0.9524;
        N=N&0x0FFF;
        temp=273.15/(1+273.15/B*log(10.0*N/((4096-F*N)*R0)))-273.15;
	return temp;
}
